3. Implement A* Algorithm for any game search problem.

from heapq import heappop, heappush

# Directions: up, down, left, right
dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def heuristic(a, b):
    # Manhattan distance heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, end):
    rows, cols = len(grid), len(grid[0])
    open_set = []
    heappush(open_set, (0 + heuristic(start, end), 0, start))
    
    came_from = {}
    g_score = {start: 0}

    while open_set:
        _, current_g, current = heappop(open_set)
        if current == end:
            # Reconstruct path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path

        for d in dirs:
            neighbor = (current[0] + d[0], current[1] + d[1])
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                tentative_g = current_g + 1
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, end)
                    heappush(open_set, (f_score, tentative_g, neighbor))
                    came_from[neighbor] = current
    return None

# Example grid: 0 - open, 1 - blocked
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0]
]

start = (0, 0)
end = (3, 4)

path = astar(grid, start, end)
print("Shortest path from", start, "to", end, ":")
print(path if path else "No path found")

O/P:

Shortest path from (0, 0) to (3, 4) :
[(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3), (3, 4)]

