6. Implement a solution for a Constraint Satisfaction Problem using Branch and Bound and Backtracking for graph coloring problem.

def is_safe(node, graph, color, c):
    for neighbor in range(len(graph)):
        if graph[node][neighbor] == 1 and color[neighbor] == c:
            return False
    return True

def graph_coloring_util(graph, m, color, node):
    if node == len(graph):
        return True

    for c in range(1, m + 1):  # Try colors from 1 to m
        if is_safe(node, graph, color, c):
            color[node] = c
            if graph_coloring_util(graph, m, color, node + 1):
                return True
            color[node] = 0  # Backtrack

    return False

def graph_coloring(graph, m):
    color = [0] * len(graph)
    if graph_coloring_util(graph, m, color, 0):
        return color
    else:
        return None

# Example graph: 4 vertices (Undirected)
# Adjacency matrix representation
graph = [
    [0, 1, 1, 1],  # Vertex 0 is connected to 1, 2, 3
    [1, 0, 1, 0],  # Vertex 1 is connected to 0, 2
    [1, 1, 0, 1],  # Vertex 2 is connected to 0, 1, 3
    [1, 0, 1, 0]   # Vertex 3 is connected to 0, 2
]

m = 3  # Number of colors

result = graph_coloring(graph, m)
if result:
    print(f"Coloring of graph with {m} colors: {result}")
else:
    print(f"No solution exists with {m} colors.")

O/P:

Coloring of graph with 3 colors: [1, 2, 3, 2]
