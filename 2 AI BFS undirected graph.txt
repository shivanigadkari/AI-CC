2. Implement Breadth First Search algorithm, use an undirected graph and develop an algorithm for searching all the vertices of a graph or tree data structure.

from collections import defaultdict, deque

# Graph class using adjacency list
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    # Add edge to the undirected graph
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    # BFS traversal
    def bfs(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)

        print("BFS traversal starting from vertex", start, ":")
        while queue:
            vertex = queue.popleft()
            print(vertex, end=' ')
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)

# Create the graph
g = Graph()

# Add edges (undirected)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

# Perform BFS traversal
g.bfs(0)

O/P:

BFS traversal starting from vertex 0 :
0 1 2 3 4 5 6 