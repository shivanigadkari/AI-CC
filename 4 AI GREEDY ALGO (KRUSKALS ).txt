4. Implement Greedy search algorithm for any of the following application: 
I.  Selection Sort 
II. Minimum Spanning Tree 
III. Single-Source Shortest Path Problem 
IV. Job Scheduling Problem 
V. Prim's Minimal Spanning Tree Algorithm 
VI. Kruskal's Minimal Spanning Tree Algorithm 
VII. Dijkstra's Minimal Spanning Tree Algorithm 

# Kruskal's Algorithm using Disjoint Set (Union-Find)

class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}

    def find(self, v):
        if self.parent[v] != v:
            self.parent[v] = self.find(self.parent[v])
        return self.parent[v]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            self.parent[root_v] = root_u
            return True
        return False

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []

    def add_edge(self, u, v, w):
        self.edges.append((w, u, v))

    def kruskal_mst(self):
        mst = []
        self.edges.sort()  # Sort edges by weight (greedy step)
        ds = DisjointSet(range(self.V))

        for weight, u, v in self.edges:
            if ds.union(u, v):
                mst.append((u, v, weight))
        return mst

# Example graph
g = Graph(6)
g.add_edge(0, 1, 4)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 2)
g.add_edge(1, 3, 5)
g.add_edge(2, 3, 5)
g.add_edge(2, 4, 11)
g.add_edge(3, 4, 2)
g.add_edge(4, 5, 1)

mst = g.kruskal_mst()
print("Edges in the Minimum Spanning Tree using Kruskal's Algorithm:")
for u, v, w in mst:
    print(f"{u} -- {v} == {w}")

O/P:

Edges in the Minimum Spanning Tree using Kruskal's Algorithm:
4 -- 5 == 1
1 -- 2 == 2
3 -- 4 == 2
0 -- 1 == 4
1 -- 3 == 5
