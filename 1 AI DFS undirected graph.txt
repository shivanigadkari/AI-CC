1. Implement depth first search algorithm, use an undirected graph and develop an algorithm for searching all the vertices of a graph or tree data structure.

from collections import defaultdict

# Graph class using adjacency list
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    # Add edge to the undirected graph
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    # DFS utility function
    def dfs_util(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.dfs_util(neighbour, visited)

    # DFS traversal
    def dfs(self, start):
        visited = set()
        print("DFS traversal starting from vertex", start, ":")
        self.dfs_util(start, visited)

# Create the graph
g = Graph()

# Add edges (undirected)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

# Perform DFS traversal
g.dfs(0)


O/P:

DFS traversal starting from vertex 0 :
0 1 3 4 2 5 6 