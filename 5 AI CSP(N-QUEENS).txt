5. Implement a solution for a Constraint Satisfaction Problem using Branch and Bound and Backtracking for n-queens problem.

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print("\n")

def is_safe(board, row, col, n, left_row, upper_diag, lower_diag):
    if left_row[row] or upper_diag[row - col + n - 1] or lower_diag[row + col]:
        return False
    return True

def solve_n_queens_util(board, col, n, left_row, upper_diag, lower_diag, solutions):
    if col >= n:
        solutions.append([row[:] for row in board])
        return

    for row in range(n):
        if is_safe(board, row, col, n, left_row, upper_diag, lower_diag):
            board[row][col] = 1
            left_row[row] = upper_diag[row - col + n - 1] = lower_diag[row + col] = True

            solve_n_queens_util(board, col + 1, n, left_row, upper_diag, lower_diag, solutions)

            # Backtrack
            board[row][col] = 0
            left_row[row] = upper_diag[row - col + n - 1] = lower_diag[row + col] = False

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    left_row = [False] * n
    upper_diag = [False] * (2 * n - 1)
    lower_diag = [False] * (2 * n - 1)
    solutions = []
    solve_n_queens_util(board, 0, n, left_row, upper_diag, lower_diag, solutions)
    return solutions

# Example: Solve 4-Queens Problem
n = 4
solutions = solve_n_queens(n)
print(f"Total solutions for {n}-Queens problem:", len(solutions))
for sol in solutions:
    print_solution(sol)

O/P:

Total solutions for 4-Queens problem: 2
. . Q .
Q . . .
. . . Q
. Q . .


. Q . .
. . . Q
Q . . .
. . Q .

